//=============================================================================
//
// êîéö [CNumber2D.h]
//
// Auther : masato masuda
//
//=============================================================================

//=============================================================================
// include
//=============================================================================
#include "Number2D.h"
#include "Texture.h"

//=============================================================================
// macro
//=============================================================================
namespace{
}


//=============================================================================
// constructor
//=============================================================================
CNumber2D::CNumber2D() :CPolygon2D()
{
  number = 0;
  drawFlag = true;
}

//=============================================================================
// create
//=============================================================================
CNumber2D* CNumber2D::Create(const VECTOR3& pos, const VECTOR2& size, const VECTOR3& rot, const COLOR& color)
{
  CNumber2D* Scene = new CNumber2D;
  Scene->_Pos = pos;
  Scene->_Rot = rot;
  Scene->_Size = size;
  Scene->_Color = color;
  Scene->Init();

  return Scene;
}

//=============================================================================
// update
//=============================================================================
void CNumber2D::Update(void)
{

}

//=============================================================================
// draw
//=============================================================================
void CNumber2D::Draw(void)
{
  if (drawFlag == true){
    CPolygon2D::Draw();
  }
}

//=============================================================================
// SetNumber
//=============================================================================
void CNumber2D::SetNumber(int num)
{
  number = num;

  uv = UV(0.1f * number, 0, 0.1f, 1.0);
  uv.InverseH = Texture.InverseH;
  uv.InverseV = Texture.InverseV;
  uv.Set();
}

//=============================================================================
// SubSize
//-----------------------------------------------------------------------------
// ÉTÉCÉYê›íËÇ∑ÇÈÇÊ
//=============================================================================
void CNumber2D::SubSize(VECTOR2 size)
{
	const VECTOR2 subSize = _Size - size;
	SetSize(subSize);
}


// end of file