//------------------------------------------------------------------------------
//
// 弾 [Ballistic.cpp]
// Author : AT-13A-273 Mai Tanabe
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// マクロ定義
//------------------------------------------------------------------------------
#define BALLISTICT_SPACE (2)	// 弾道の間隔

//------------------------------------------------------------------------------
// ヘッダインクルード
//------------------------------------------------------------------------------
#include <math.h>
#include <float.h>

#include "Ballistic.h"

//------------------------------------------------------------------------------
// コンストラクタ
//------------------------------------------------------------------------------
// 引数
//  なし
//------------------------------------------------------------------------------
CBallistic::CBallistic()
{
}

//------------------------------------------------------------------------------
// デストラクタ
//------------------------------------------------------------------------------
// 引数
//  なし
//------------------------------------------------------------------------------
CBallistic::~CBallistic()
{

}

//------------------------------------------------------------------------------
// 初期化
//------------------------------------------------------------------------------
// 引数
//  なし
// 戻り値
//  なし
//------------------------------------------------------------------------------
void CBallistic::Init( COLOR color)
{
	// 弾道マーク
	for (int cnt = 0; cnt < MARK_MAX; cnt++)
	{
		BallisticMark[cnt] = CBillboard::Create(VECTOR3(0.0f, 0.0f, 0.0f),
												VECTOR2(1.5f, 1.5f),
												VECTOR3(0.0f, 0.0f, 0.0f),
												color);
		BallisticMark[cnt]->SetTex(CTexture::Texture(TEX_BALLISTIC));
	}

	// 着弾マーク
	Landing = CPolygon3D::Create(VECTOR3(0.0f, 0.0f, 0.0f),
								VECTOR2(30.0f, 30.0f),
								VECTOR3(0.0f, 0.0f, 0.0f),
								COLOR(color.r, color.g, color.b, 1.0f));
	Landing->SetTex(CTexture::Texture(TEX_LANDING));
}

//------------------------------------------------------------------------------
// 更新
//------------------------------------------------------------------------------
// 引数
//  pos : 位置
//  rot : 回転
// 戻り値
//  なし
//------------------------------------------------------------------------------
void CBallistic::Update(VECTOR3 pos, VECTOR3 rot)
{
	VECTOR3 Move;

	// 回転量の変換
	rot.x = DEG2RAD(rot.x);
	rot.y = DEG2RAD(rot.y);
	rot.z = 0;

	REVISE_PI(rot.x);
	REVISE_PI(rot.y);

	// 移動値
	Move.x = (BULLET_SPEED * cosf(rot.x)) * sinf(rot.y);
	Move.z = (BULLET_SPEED * cosf(rot.x)) * cosf(rot.y);
	Move.y = BULLET_SPEED * -sinf(rot.x);

	max(Move.x, FLT_MIN);
	max(Move.z, FLT_MIN);

	// 弾道
	for (int cnt = 0; cnt < MARK_MAX; cnt++)
	{
		pos += Move * BALLISTICT_SPACE;
		BallisticMark[cnt]->SetPos(pos);

		Move.y += BULLET_GRAVITY * BALLISTICT_SPACE;
	}
}

//------------------------------------------------------------------------------
// 生成
//------------------------------------------------------------------------------
// 引数
//  color : 色
// 戻り値
//  CBallistic : 生成した弾道のポインタ
//------------------------------------------------------------------------------
CBallistic* CBallistic::Create(COLOR color)
{
	CBallistic* Scene = new CBallistic;

	Scene->Init(color);

	return Scene;
}

//------------------------------------------------------------------------------
// EOF